#!/bin/bash
####################################################################################
###
### QUBIC miner qubic-li  qubic.li

#	global variables, don`t change it
####################################################################################
#	The file contains the following variables:
#	MINERNAME API_PORT CUSTOM_URL POOL PASS WALLET TEMPLATE COIN ADDITION
. /dog/colors
cd `dirname $0`
CFG_FILENAME="miner.cfg"
. $CFG_FILENAME

#	custom package variables
####################################################################################
LOG="/dog/log/qubic-gpu.log" 
SETTINGS_FILE="appsettings.json"
MINER_FILE="qli-Client"


PROFILE=`cat /run/dog/profiles/profile$(pstree --show-parents -l -a -p $$ | sed -n 's/.*-dmS miner\([0-9]*\)\..*/\1/p')`
ADDITION=$(echo $PROFILE | jq -r '.addition')


function NeedToInstall() {
	local ver=`apt-cache policy $1 | grep Installed | sed 's/Installed://; s/\s*//'`
	[[ $ver && $ver != '(none)' ]] && echo 0 || echo 1
}

if [[ $(NeedToInstall libc6) -eq 1 ]]; then
	echo -e "> Install libc6"
	src="deb http://cz.archive.ubuntu.com/ubuntu jammy main"
	[[ ! `cat /etc/apt/sources.list | grep "$src"` ]] && echo "$src" >> /etc/apt/sources.list
	apt update
	apt install libc6 -yqq
else
	echo -e "${GREEN}> libc6 already installed${NOCOLOR}"
fi

if [[ $(NeedToInstall g++-11) -eq 1 ]]; then
	echo -e "> Install libc6"
	src="deb http://cz.archive.ubuntu.com/ubuntu jammy main"
	[[ ! `cat /etc/apt/sources.list | grep "$src"` ]] && echo "$src" >> /etc/apt/sources.list
	apt update
	apt install g++-11 -yqq
else
	echo -e "${GREEN}> g++-11 already installed${NOCOLOR}"
fi


#echo `pstree --show-parents -l -a -p $$ | sed -n 's/.*-dmS miner\([0-9]*\)\..*/\1/p'`
#read -rsn1 -p"Press any key to continue"

OVERWRITE_APPSETTINGS_JSON=true
URL_QLI=https://dl.qubic.li/downloads/qli-Client-1.9.5-Linux-x64.tar.gz
ALIAS=`cat /etc/hostname`
AUTOUPDATEENABLED=
CHECKUPDATEENABLED=


#	parse args ADDITION
set $ADDITION
while [ -n "$1" ]; do
	option=$1
	
	if [[ $option == 'url_qli' ]]; then
		shift
		[[ -z $1 ]] && echo "Uncorrect argument value" && exit 1
		URL_QLI=$1
	elif [[ $option == 'alias' ]]; then
		shift
		[[ -z $1 ]] && echo "Uncorrect argument value" && exit 1
		ALIAS=$1
	elif [[ $option == 'autoupdateEnabled' ]]; then
		shift
		[[ -z $1 ]] && echo "Uncorrect argument value" && exit 1
		AUTOUPDATEENABLED=$1
	elif [[ $option == 'checkUpdateEnabled' ]]; then
		shift
		[[ -z $1 ]] && echo "Uncorrect argument value" && exit 1
		CHECKUPDATEENABLED=$1
	else
		XLAM+=" $1"
	fi

	shift
done

gpu_json=$(jq -r <<< "$XLAM")
ret=$?
if [ $ret -ne 0 ]; then
        echo "addition | json | ${RED}parse error, exit${WHITE}" && exit 1
fi
[[ $gpu_json ]] || gpu_json=$(jq -n '{"Settings": {"trainer": {"cpu": false, "gpu": true, "gpuVersion": "CUDA12"}}}')

[[ $POOL ]] && pool=$POOL || pool='https://mine.qubic.li/'
gpu_json=$(jq --arg alias "$ALIAS""_GPU" '.Settings.alias= $alias'	<<< $gpu_json)
gpu_json=$(jq --arg baseUrl "$pool" '.Settings.baseUrl= $baseUrl'	<<< $gpu_json)

[[ $AUTOUPDATEENABLED  ]] && gpu_json=$(jq --argjson checkUpdateEnabled $CHECKUPDATEENABLED '.Settings.checkUpdateEnabled= $checkUpdateEnabled'	<<< $gpu_json)
[[ $CHECKUPDATEENABLED ]] && gpu_json=$(jq --argjson autoupdateEnabled $AUTOUPDATEENABLED '.Settings.autoupdateEnabled= $autoupdateEnabled'	<<< $gpu_json)

if [[ ${#WALLET} -ge 61 ]]; then
	gpu_json=$(jq --arg wallet $WALLET '.Settings.accessToken= $wallet'	<<< $gpu_json)
else
	gpu_json=$(jq --arg wallet $WALLET '.Settings.payoutId= $wallet'	<<< $gpu_json)
fi


DL_VERSION=`basename "$URL_QLI"`
LS_VER=`ls *.tar.gz`

if [[ $DL_VERSION != $LS_VER ]]; then
	echo "New url Qubic client, need to download"
	if wget --spider "${URL_QLI}" 2>/dev/null; then
		:
	else
		echo -e "${RED}> Url does not exist, exit${WHITE}" && exit 1
	fi

	[[ $LS_VER ]] && rm $LS_VER
	[[ -f $MINER_FILE ]] && rm $MINER_FILE
	
	wget $URL_QLI -q -O $DL_VERSION
	exitcode=$? && [[ $exitcode -ne 0 ]] && echo -e "${RED}> Error occured $exitcode while downloading, exit${WHITE}" && exit 1

	tar -xf $DL_VERSION $MINER_FILE
	exitcode=$?
	if [[ $exitcode -ne 0 ]]; then
		echo -e "${RED}> Error occured while extracting ${GREEN}$DL_VERSION${RED}, exit${WHITE}"
		rm $DL_VERSION
		exit 1
	fi

fi


if [ -f $SETTINGS_FILE ]; then
	if [[ $OVERWRITE_APPSETTINGS_JSON == true ]]; then
		echo "$gpu_json" > $SETTINGS_FILE
	fi
else 
	echo "$gpu_json" > $SETTINGS_FILE
fi


$LINE
echo -e "${GREEN}> Starting custom miner with next settings:${WHITE}"
echo $gpu_json | jq '.'

batch="$PWD/$MINER_FILE $args"

#	unbuffer is needed to keep colors with tee
unbuffer $batch 2>&1 | tee --append $LOG

